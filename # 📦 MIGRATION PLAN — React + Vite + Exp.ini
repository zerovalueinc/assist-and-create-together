# 📦 MIGRATION PLAN — React + Vite + Express + SQLite ➝ Supabase

This is a full-stack migration task. You're converting an existing GitHub repo that uses:

- React + Vite (Frontend)
- Express.js (Backend)
- SQLite (Database)

...into a **Supabase-powered app** using Supabase for:

- Authentication
- PostgreSQL (Managed)
- RESTful DB access (via SDK or RPC)
- Edge Functions (optional)
- Realtime & Storage (optional)

---

## 🚧 PHASE 1: INITIAL SETUP

1. **Initialize Supabase:**

   - Create a new Supabase project on https://supabase.com/
   - Save the following environment variables in `.env`:
     ```env
     VITE_SUPABASE_URL=your-project-url
     VITE_SUPABASE_ANON_KEY=your-anon-key
     ```

   - Install Supabase CLI & initialize:
     ```bash
     npm install -g supabase
     supabase init
     ```

---

## 🧠 PHASE 2: DATABASE MIGRATION

1. **Extract SQLite Schema:**
   ```bash
   sqlite3 db.sqlite .schema > schema.sql
Convert SQLite to PostgreSQL:

Manually update syntax for Supabase compatibility (data types, foreign keys).

Use tools like pgloader if helpful.

Run final schema via Supabase SQL Editor or:

bash
Copy
Edit
supabase db push
(Optional) Migrate Data:

Export data from SQLite:

bash
Copy
Edit
sqlite3 db.sqlite .dump > dump.sql
Use SQL insert scripts or a data migration script with Supabase client/server role.

🧰 PHASE 3: BACKEND REPLACEMENT
Deprecate Express API:

Identify all Express routes and what DB queries they trigger.

Replace each with direct Supabase queries using @supabase/supabase-js.

Supabase Client Setup (Frontend)

Install SDK:

bash
Copy
Edit
npm install @supabase/supabase-js
Create lib/supabaseClient.ts:

ts
Copy
Edit
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(import.meta.env.VITE_SUPABASE_URL, import.meta.env.VITE_SUPABASE_ANON_KEY)

export default supabase
Use supabase.from('table').select() etc. in place of fetch calls to Express.

(Optional) Edge Functions:

If any custom backend logic is required, create a Supabase Edge Function:

bash
Copy
Edit
supabase functions new my-function
🔐 PHASE 4: AUTHENTICATION
Enable Supabase Auth:

Go to "Authentication" in Supabase Studio.

Enable email/password provider.

Implement Supabase Auth in React:

Signup:

ts
Copy
Edit
const { data, error } = await supabase.auth.signUp({ email, password })
Login:

ts
Copy
Edit
const { data, error } = await supabase.auth.signInWithPassword({ email, password })
Logout:

ts
Copy
Edit
await supabase.auth.signOut()
Use supabase.auth.onAuthStateChange() to handle session tracking.

🗂 PHASE 5: PROJECT RESTRUCTURE
Frontend Folder Structure:

pgsql
Copy
Edit
my-app/
├── .env
├── supabase/
│   └── migrations/
├── public/
├── src/
│   ├── components/
│   ├── pages/
│   ├── lib/
│   │   └── supabaseClient.ts
│   └── App.tsx
├── vite.config.ts
├── index.html
├── package.json
└── README.md
Cleanup:

Remove any Express-related code unless still needed for SSR or proxying.

Remove SQLite-specific logic and local DB.

✅ CHECKLIST FOR DONE
Feature	Completed
Supabase project initialized	✅
Supabase schema migrated	✅
Auth connected to frontend	✅
Express endpoints removed	✅
Supabase SDK used in frontend	✅
Supabase Edge functions (if any)	✅
Project structure cleaned up	✅

📌 Notes
Use supabase.from('table') calls wherever data is needed

Favor RPC functions for complex logic

Use supabase.auth.getUser() and onAuthStateChange() to manage sessions

Role-based access and RLS can be configured inside Supabase